{"remainingRequest":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js??ref--0-1!E:\\Downloads\\wiki-dev\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Downloads\\wiki-dev\\client\\components\\editor\\editor-markdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Downloads\\wiki-dev\\client\\components\\editor\\editor-markdown.vue","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\.babelrc","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618998867176},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js","mtime":1617693652020},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\vue-loader\\lib\\index.js","mtime":1618998883415}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}