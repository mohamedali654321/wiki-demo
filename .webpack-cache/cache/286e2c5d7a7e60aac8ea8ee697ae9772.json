{"remainingRequest":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js??ref--0-1!E:\\Downloads\\wiki-dev\\client\\libs\\codemirror-merge\\diff-match-patch.js","dependencies":[{"path":"E:\\Downloads\\wiki-dev\\client\\libs\\codemirror-merge\\diff-match-patch.js","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\.babelrc","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618998867176},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js","mtime":1617693652020}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}