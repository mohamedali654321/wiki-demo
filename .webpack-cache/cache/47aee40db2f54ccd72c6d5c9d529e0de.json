{"remainingRequest":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js??ref--0-1!E:\\Downloads\\wiki-dev\\node_modules\\vuetify\\lib\\components\\VSlideGroup\\VSlideGroup.js","dependencies":[{"path":"E:\\Downloads\\wiki-dev\\node_modules\\vuetify\\lib\\components\\VSlideGroup\\VSlideGroup.js","mtime":1618998884305},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618998867176},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js","mtime":1617693652020}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCi8vIFN0eWxlcwppbXBvcnQgIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTbGlkZUdyb3VwL1ZTbGlkZUdyb3VwLnNhc3MiOyAvLyBDb21wb25lbnRzCgppbXBvcnQgVkljb24gZnJvbSAnLi4vVkljb24nOwppbXBvcnQgeyBWRmFkZVRyYW5zaXRpb24gfSBmcm9tICcuLi90cmFuc2l0aW9ucyc7IC8vIEV4dGVuc2lvbnMKCmltcG9ydCB7IEJhc2VJdGVtR3JvdXAgfSBmcm9tICcuLi9WSXRlbUdyb3VwL1ZJdGVtR3JvdXAnOyAvLyBNaXhpbnMKCmltcG9ydCBNb2JpbGUgZnJvbSAnLi4vLi4vbWl4aW5zL21vYmlsZSc7IC8vIERpcmVjdGl2ZXMKCmltcG9ydCBSZXNpemUgZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9yZXNpemUnOwppbXBvcnQgVG91Y2ggZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy90b3VjaCc7IC8vIFV0aWxpdGllcwoKaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucyc7CmV4cG9ydCBjb25zdCBCYXNlU2xpZGVHcm91cCA9IG1peGlucyhCYXNlSXRlbUdyb3VwLCBNb2JpbGUpLmV4dGVuZCh7CiAgbmFtZTogJ2Jhc2Utc2xpZGUtZ3JvdXAnLAogIGRpcmVjdGl2ZXM6IHsKICAgIFJlc2l6ZSwKICAgIFRvdWNoCiAgfSwKICBwcm9wczogewogICAgYWN0aXZlQ2xhc3M6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAndi1zbGlkZS1pdGVtLS1hY3RpdmUnCiAgICB9LAogICAgY2VudGVyQWN0aXZlOiBCb29sZWFuLAogICAgbmV4dEljb246IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJG5leHQnCiAgICB9LAogICAgcHJldkljb246IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJHByZXYnCiAgICB9LAogICAgc2hvd0Fycm93czogewogICAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSwKICAgICAgdmFsaWRhdG9yOiB2ID0+IHR5cGVvZiB2ID09PSAnYm9vbGVhbicgfHwgWydhbHdheXMnLCAnZGVza3RvcCcsICdtb2JpbGUnXS5pbmNsdWRlcyh2KQogICAgfQogIH0sCiAgZGF0YTogKCkgPT4gKHsKICAgIGludGVybmFsSXRlbXNMZW5ndGg6IDAsCiAgICBpc092ZXJmbG93aW5nOiBmYWxzZSwKICAgIHJlc2l6ZVRpbWVvdXQ6IDAsCiAgICBzdGFydFg6IDAsCiAgICBzY3JvbGxPZmZzZXQ6IDAsCiAgICB3aWR0aHM6IHsKICAgICAgY29udGVudDogMCwKICAgICAgd3JhcHBlcjogMAogICAgfQogIH0pLAogIGNvbXB1dGVkOiB7CiAgICBfX2NhY2hlZE5leHQoKSB7CiAgICAgIHJldHVybiB0aGlzLmdlblRyYW5zaXRpb24oJ25leHQnKTsKICAgIH0sCgogICAgX19jYWNoZWRQcmV2KCkgewogICAgICByZXR1cm4gdGhpcy5nZW5UcmFuc2l0aW9uKCdwcmV2Jyk7CiAgICB9LAoKICAgIGNsYXNzZXMoKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIEJhc2VJdGVtR3JvdXAub3B0aW9ucy5jb21wdXRlZC5jbGFzc2VzLmNhbGwodGhpcykpLCB7fSwgewogICAgICAgICd2LXNsaWRlLWdyb3VwJzogdHJ1ZSwKICAgICAgICAndi1zbGlkZS1ncm91cC0taGFzLWFmZml4ZXMnOiB0aGlzLmhhc0FmZml4ZXMsCiAgICAgICAgJ3Ytc2xpZGUtZ3JvdXAtLWlzLW92ZXJmbG93aW5nJzogdGhpcy5pc092ZXJmbG93aW5nCiAgICAgIH0pOwogICAgfSwKCiAgICBoYXNBZmZpeGVzKCkgewogICAgICBzd2l0Y2ggKHRoaXMuc2hvd0Fycm93cykgewogICAgICAgIC8vIEFsd2F5cyBzaG93IGFycm93cyBvbiBkZXNrdG9wICYgbW9iaWxlCiAgICAgICAgY2FzZSAnYWx3YXlzJzoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIC8vIEFsd2F5cyBzaG93IGFycm93cyBvbiBkZXNrdG9wCgogICAgICAgIGNhc2UgJ2Rlc2t0b3AnOgogICAgICAgICAgcmV0dXJuICF0aGlzLmlzTW9iaWxlOwogICAgICAgIC8vIFNob3cgYXJyb3dzIG9uIG1vYmlsZSB3aGVuIG92ZXJmbG93aW5nLgogICAgICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgZGVmYXVsdCAyLjIgYmVoYXZpb3IKCiAgICAgICAgY2FzZSB0cnVlOgogICAgICAgICAgcmV0dXJuIHRoaXMuaXNPdmVyZmxvd2luZzsKICAgICAgICAvLyBBbHdheXMgc2hvdyBvbiBtb2JpbGUKCiAgICAgICAgY2FzZSAnbW9iaWxlJzoKICAgICAgICAgIHJldHVybiB0aGlzLmlzTW9iaWxlIHx8IHRoaXMuaXNPdmVyZmxvd2luZzsKICAgICAgICAvLyBodHRwczovL21hdGVyaWFsLmlvL2NvbXBvbmVudHMvdGFicyNzY3JvbGxhYmxlLXRhYnMKICAgICAgICAvLyBBbHdheXMgc2hvdyBhcnJvd3Mgd2hlbgogICAgICAgIC8vIG92ZXJmbG93ZWQgb24gZGVza3RvcAoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuICF0aGlzLmlzTW9iaWxlICYmIHRoaXMuaXNPdmVyZmxvd2luZzsKICAgICAgfQogICAgfSwKCiAgICBoYXNOZXh0KCkgewogICAgICBpZiAoIXRoaXMuaGFzQWZmaXhlcykgcmV0dXJuIGZhbHNlOwogICAgICBjb25zdCB7CiAgICAgICAgY29udGVudCwKICAgICAgICB3cmFwcGVyCiAgICAgIH0gPSB0aGlzLndpZHRoczsgLy8gQ2hlY2sgb25lIHNjcm9sbCBhaGVhZCB0byBrbm93IHRoZSB3aWR0aCBvZiByaWdodC1tb3N0IGl0ZW0KCiAgICAgIHJldHVybiBjb250ZW50ID4gTWF0aC5hYnModGhpcy5zY3JvbGxPZmZzZXQpICsgd3JhcHBlcjsKICAgIH0sCgogICAgaGFzUHJldigpIHsKICAgICAgcmV0dXJuIHRoaXMuaGFzQWZmaXhlcyAmJiB0aGlzLnNjcm9sbE9mZnNldCAhPT0gMDsKICAgIH0KCiAgfSwKICB3YXRjaDogewogICAgaW50ZXJuYWxWYWx1ZTogJ3NldFdpZHRocycsCiAgICAvLyBXaGVuIG92ZXJmbG93IGNoYW5nZXMsIHRoZSBhcnJvd3MgYWx0ZXIKICAgIC8vIHRoZSB3aWR0aHMgb2YgdGhlIGNvbnRlbnQgYW5kIHdyYXBwZXIKICAgIC8vIGFuZCBuZWVkIHRvIGJlIHJlY2FsY3VsYXRlZAogICAgaXNPdmVyZmxvd2luZzogJ3NldFdpZHRocycsCgogICAgc2Nyb2xsT2Zmc2V0KHZhbCkgewogICAgICB0aGlzLiRyZWZzLmNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gInRyYW5zbGF0ZVgoIi5jb25jYXQoLXZhbCwgInB4KSIpOwogICAgfQoKICB9LAoKICBiZWZvcmVVcGRhdGUoKSB7CiAgICB0aGlzLmludGVybmFsSXRlbXNMZW5ndGggPSAodGhpcy4kY2hpbGRyZW4gfHwgW10pLmxlbmd0aDsKICB9LAoKICB1cGRhdGVkKCkgewogICAgaWYgKHRoaXMuaW50ZXJuYWxJdGVtc0xlbmd0aCA9PT0gKHRoaXMuJGNoaWxkcmVuIHx8IFtdKS5sZW5ndGgpIHJldHVybjsKICAgIHRoaXMuc2V0V2lkdGhzKCk7CiAgfSwKCiAgbWV0aG9kczogewogICAgLy8gQWx3YXlzIGdlbmVyYXRlIG5leHQgZm9yIHNjcm9sbGFibGUgaGludAogICAgZ2VuTmV4dCgpIHsKICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuJHNjb3BlZFNsb3RzLm5leHQgPyB0aGlzLiRzY29wZWRTbG90cy5uZXh0KHt9KSA6IHRoaXMuJHNsb3RzLm5leHQgfHwgdGhpcy5fX2NhY2hlZE5leHQ7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LXNsaWRlLWdyb3VwX19uZXh0JywKICAgICAgICBjbGFzczogewogICAgICAgICAgJ3Ytc2xpZGUtZ3JvdXBfX25leHQtLWRpc2FibGVkJzogIXRoaXMuaGFzTmV4dAogICAgICAgIH0sCiAgICAgICAgb246IHsKICAgICAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLm9uQWZmaXhDbGljaygnbmV4dCcpCiAgICAgICAgfSwKICAgICAgICBrZXk6ICduZXh0JwogICAgICB9LCBbc2xvdF0pOwogICAgfSwKCiAgICBnZW5Db250ZW50KCkgewogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZS1ncm91cF9fY29udGVudCcsCiAgICAgICAgcmVmOiAnY29udGVudCcKICAgICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdCk7CiAgICB9LAoKICAgIGdlbkRhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY2xhc3M6IHRoaXMuY2xhc3NlcywKICAgICAgICBkaXJlY3RpdmVzOiBbewogICAgICAgICAgbmFtZTogJ3Jlc2l6ZScsCiAgICAgICAgICB2YWx1ZTogdGhpcy5vblJlc2l6ZQogICAgICAgIH1dCiAgICAgIH07CiAgICB9LAoKICAgIGdlbkljb24obG9jYXRpb24pIHsKICAgICAgbGV0IGljb24gPSBsb2NhdGlvbjsKCiAgICAgIGlmICh0aGlzLiR2dWV0aWZ5LnJ0bCAmJiBsb2NhdGlvbiA9PT0gJ3ByZXYnKSB7CiAgICAgICAgaWNvbiA9ICduZXh0JzsKICAgICAgfSBlbHNlIGlmICh0aGlzLiR2dWV0aWZ5LnJ0bCAmJiBsb2NhdGlvbiA9PT0gJ25leHQnKSB7CiAgICAgICAgaWNvbiA9ICdwcmV2JzsKICAgICAgfQoKICAgICAgY29uc3QgdXBwZXJMb2NhdGlvbiA9ICIiLmNvbmNhdChsb2NhdGlvblswXS50b1VwcGVyQ2FzZSgpKS5jb25jYXQobG9jYXRpb24uc2xpY2UoMSkpOwogICAgICBjb25zdCBoYXNBZmZpeCA9IHRoaXNbImhhcyIuY29uY2F0KHVwcGVyTG9jYXRpb24pXTsKICAgICAgaWYgKCF0aGlzLnNob3dBcnJvd3MgJiYgIWhhc0FmZml4KSByZXR1cm4gbnVsbDsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkljb24sIHsKICAgICAgICBwcm9wczogewogICAgICAgICAgZGlzYWJsZWQ6ICFoYXNBZmZpeAogICAgICAgIH0KICAgICAgfSwgdGhpc1siIi5jb25jYXQoaWNvbiwgIkljb24iKV0pOwogICAgfSwKCiAgICAvLyBBbHdheXMgZ2VuZXJhdGUgcHJldiBmb3Igc2Nyb2xsYWJsZSBoaW50CiAgICBnZW5QcmV2KCkgewogICAgICBjb25zdCBzbG90ID0gdGhpcy4kc2NvcGVkU2xvdHMucHJldiA/IHRoaXMuJHNjb3BlZFNsb3RzLnByZXYoe30pIDogdGhpcy4kc2xvdHMucHJldiB8fCB0aGlzLl9fY2FjaGVkUHJldjsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3Ytc2xpZGUtZ3JvdXBfX3ByZXYnLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAndi1zbGlkZS1ncm91cF9fcHJldi0tZGlzYWJsZWQnOiAhdGhpcy5oYXNQcmV2CiAgICAgICAgfSwKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6ICgpID0+IHRoaXMub25BZmZpeENsaWNrKCdwcmV2JykKICAgICAgICB9LAogICAgICAgIGtleTogJ3ByZXYnCiAgICAgIH0sIFtzbG90XSk7CiAgICB9LAoKICAgIGdlblRyYW5zaXRpb24obG9jYXRpb24pIHsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkZhZGVUcmFuc2l0aW9uLCBbdGhpcy5nZW5JY29uKGxvY2F0aW9uKV0pOwogICAgfSwKCiAgICBnZW5XcmFwcGVyKCkgewogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZS1ncm91cF9fd3JhcHBlcicsCiAgICAgICAgZGlyZWN0aXZlczogW3sKICAgICAgICAgIG5hbWU6ICd0b3VjaCcsCiAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICBzdGFydDogZSA9PiB0aGlzLm92ZXJmbG93Q2hlY2soZSwgdGhpcy5vblRvdWNoU3RhcnQpLAogICAgICAgICAgICBtb3ZlOiBlID0+IHRoaXMub3ZlcmZsb3dDaGVjayhlLCB0aGlzLm9uVG91Y2hNb3ZlKSwKICAgICAgICAgICAgZW5kOiBlID0+IHRoaXMub3ZlcmZsb3dDaGVjayhlLCB0aGlzLm9uVG91Y2hFbmQpCiAgICAgICAgICB9CiAgICAgICAgfV0sCiAgICAgICAgcmVmOiAnd3JhcHBlcicKICAgICAgfSwgW3RoaXMuZ2VuQ29udGVudCgpXSk7CiAgICB9LAoKICAgIGNhbGN1bGF0ZU5ld09mZnNldChkaXJlY3Rpb24sIHdpZHRocywgcnRsLCBjdXJyZW50U2Nyb2xsT2Zmc2V0KSB7CiAgICAgIGNvbnN0IHNpZ24gPSBydGwgPyAtMSA6IDE7CiAgICAgIGNvbnN0IG5ld0Fib3NsdXRlT2Zmc2V0ID0gc2lnbiAqIGN1cnJlbnRTY3JvbGxPZmZzZXQgKyAoZGlyZWN0aW9uID09PSAncHJldicgPyAtMSA6IDEpICogd2lkdGhzLndyYXBwZXI7CiAgICAgIHJldHVybiBzaWduICogTWF0aC5tYXgoTWF0aC5taW4obmV3QWJvc2x1dGVPZmZzZXQsIHdpZHRocy5jb250ZW50IC0gd2lkdGhzLndyYXBwZXIpLCAwKTsKICAgIH0sCgogICAgb25BZmZpeENsaWNrKGxvY2F0aW9uKSB7CiAgICAgIHRoaXMuJGVtaXQoImNsaWNrOiIuY29uY2F0KGxvY2F0aW9uKSk7CiAgICAgIHRoaXMuc2Nyb2xsVG8obG9jYXRpb24pOwogICAgfSwKCiAgICBvblJlc2l6ZSgpIHsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgaWYgKHRoaXMuX2lzRGVzdHJveWVkKSByZXR1cm47CiAgICAgIHRoaXMuc2V0V2lkdGhzKCk7CiAgICB9LAoKICAgIG9uVG91Y2hTdGFydChlKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBjb250ZW50CiAgICAgIH0gPSB0aGlzLiRyZWZzOwogICAgICB0aGlzLnN0YXJ0WCA9IHRoaXMuc2Nyb2xsT2Zmc2V0ICsgZS50b3VjaHN0YXJ0WDsKICAgICAgY29udGVudC5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNpdGlvbicsICdub25lJyk7CiAgICAgIGNvbnRlbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3dpbGxDaGFuZ2UnLCAndHJhbnNmb3JtJyk7CiAgICB9LAoKICAgIG9uVG91Y2hNb3ZlKGUpIHsKICAgICAgdGhpcy5zY3JvbGxPZmZzZXQgPSB0aGlzLnN0YXJ0WCAtIGUudG91Y2htb3ZlWDsKICAgIH0sCgogICAgb25Ub3VjaEVuZCgpIHsKICAgICAgY29uc3QgewogICAgICAgIGNvbnRlbnQsCiAgICAgICAgd3JhcHBlcgogICAgICB9ID0gdGhpcy4kcmVmczsKICAgICAgY29uc3QgbWF4U2Nyb2xsT2Zmc2V0ID0gY29udGVudC5jbGllbnRXaWR0aCAtIHdyYXBwZXIuY2xpZW50V2lkdGg7CiAgICAgIGNvbnRlbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24nLCBudWxsKTsKICAgICAgY29udGVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lsbENoYW5nZScsIG51bGwpOwoKICAgICAgaWYgKHRoaXMuJHZ1ZXRpZnkucnRsKSB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KICAgICAgICBpZiAodGhpcy5zY3JvbGxPZmZzZXQgPiAwIHx8ICF0aGlzLmlzT3ZlcmZsb3dpbmcpIHsKICAgICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gMDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsT2Zmc2V0IDw9IC1tYXhTY3JvbGxPZmZzZXQpIHsKICAgICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gLW1heFNjcm9sbE9mZnNldDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KICAgICAgICBpZiAodGhpcy5zY3JvbGxPZmZzZXQgPCAwIHx8ICF0aGlzLmlzT3ZlcmZsb3dpbmcpIHsKICAgICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gMDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsT2Zmc2V0ID49IG1heFNjcm9sbE9mZnNldCkgewogICAgICAgICAgdGhpcy5zY3JvbGxPZmZzZXQgPSBtYXhTY3JvbGxPZmZzZXQ7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIG92ZXJmbG93Q2hlY2soZSwgZm4pIHsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgdGhpcy5pc092ZXJmbG93aW5nICYmIGZuKGUpOwogICAgfSwKCiAgICBzY3JvbGxJbnRvVmlldwogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICgpIHsKICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkSXRlbSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJbmRleCA9PT0gMCB8fCAhdGhpcy5jZW50ZXJBY3RpdmUgJiYgIXRoaXMuaXNPdmVyZmxvd2luZykgewogICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gMDsKICAgICAgfSBlbHNlIGlmICh0aGlzLmNlbnRlckFjdGl2ZSkgewogICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gdGhpcy5jYWxjdWxhdGVDZW50ZXJlZE9mZnNldCh0aGlzLnNlbGVjdGVkSXRlbS4kZWwsIHRoaXMud2lkdGhzLCB0aGlzLiR2dWV0aWZ5LnJ0bCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc092ZXJmbG93aW5nKSB7CiAgICAgICAgdGhpcy5zY3JvbGxPZmZzZXQgPSB0aGlzLmNhbGN1bGF0ZVVwZGF0ZWRPZmZzZXQodGhpcy5zZWxlY3RlZEl0ZW0uJGVsLCB0aGlzLndpZHRocywgdGhpcy4kdnVldGlmeS5ydGwsIHRoaXMuc2Nyb2xsT2Zmc2V0KTsKICAgICAgfQogICAgfSwKCiAgICBjYWxjdWxhdGVVcGRhdGVkT2Zmc2V0KHNlbGVjdGVkRWxlbWVudCwgd2lkdGhzLCBydGwsIGN1cnJlbnRTY3JvbGxPZmZzZXQpIHsKICAgICAgY29uc3QgY2xpZW50V2lkdGggPSBzZWxlY3RlZEVsZW1lbnQuY2xpZW50V2lkdGg7CiAgICAgIGNvbnN0IG9mZnNldExlZnQgPSBydGwgPyB3aWR0aHMuY29udGVudCAtIHNlbGVjdGVkRWxlbWVudC5vZmZzZXRMZWZ0IC0gY2xpZW50V2lkdGggOiBzZWxlY3RlZEVsZW1lbnQub2Zmc2V0TGVmdDsKCiAgICAgIGlmIChydGwpIHsKICAgICAgICBjdXJyZW50U2Nyb2xsT2Zmc2V0ID0gLWN1cnJlbnRTY3JvbGxPZmZzZXQ7CiAgICAgIH0KCiAgICAgIGNvbnN0IHRvdGFsV2lkdGggPSB3aWR0aHMud3JhcHBlciArIGN1cnJlbnRTY3JvbGxPZmZzZXQ7CiAgICAgIGNvbnN0IGl0ZW1PZmZzZXQgPSBjbGllbnRXaWR0aCArIG9mZnNldExlZnQ7CiAgICAgIGNvbnN0IGFkZGl0aW9uYWxPZmZzZXQgPSBjbGllbnRXaWR0aCAqIDAuNDsKCiAgICAgIGlmIChvZmZzZXRMZWZ0IDw9IGN1cnJlbnRTY3JvbGxPZmZzZXQpIHsKICAgICAgICBjdXJyZW50U2Nyb2xsT2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0TGVmdCAtIGFkZGl0aW9uYWxPZmZzZXQsIDApOwogICAgICB9IGVsc2UgaWYgKHRvdGFsV2lkdGggPD0gaXRlbU9mZnNldCkgewogICAgICAgIGN1cnJlbnRTY3JvbGxPZmZzZXQgPSBNYXRoLm1pbihjdXJyZW50U2Nyb2xsT2Zmc2V0IC0gKHRvdGFsV2lkdGggLSBpdGVtT2Zmc2V0IC0gYWRkaXRpb25hbE9mZnNldCksIHdpZHRocy5jb250ZW50IC0gd2lkdGhzLndyYXBwZXIpOwogICAgICB9CgogICAgICByZXR1cm4gcnRsID8gLWN1cnJlbnRTY3JvbGxPZmZzZXQgOiBjdXJyZW50U2Nyb2xsT2Zmc2V0OwogICAgfSwKCiAgICBjYWxjdWxhdGVDZW50ZXJlZE9mZnNldChzZWxlY3RlZEVsZW1lbnQsIHdpZHRocywgcnRsKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBvZmZzZXRMZWZ0LAogICAgICAgIGNsaWVudFdpZHRoCiAgICAgIH0gPSBzZWxlY3RlZEVsZW1lbnQ7CgogICAgICBpZiAocnRsKSB7CiAgICAgICAgY29uc3Qgb2Zmc2V0Q2VudGVyZWQgPSB3aWR0aHMuY29udGVudCAtIG9mZnNldExlZnQgLSBjbGllbnRXaWR0aCAvIDIgLSB3aWR0aHMud3JhcHBlciAvIDI7CiAgICAgICAgcmV0dXJuIC1NYXRoLm1pbih3aWR0aHMuY29udGVudCAtIHdpZHRocy53cmFwcGVyLCBNYXRoLm1heCgwLCBvZmZzZXRDZW50ZXJlZCkpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IG9mZnNldENlbnRlcmVkID0gb2Zmc2V0TGVmdCArIGNsaWVudFdpZHRoIC8gMiAtIHdpZHRocy53cmFwcGVyIC8gMjsKICAgICAgICByZXR1cm4gTWF0aC5taW4od2lkdGhzLmNvbnRlbnQgLSB3aWR0aHMud3JhcHBlciwgTWF0aC5tYXgoMCwgb2Zmc2V0Q2VudGVyZWQpKTsKICAgICAgfQogICAgfSwKCiAgICBzY3JvbGxUbwogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgIChsb2NhdGlvbikgewogICAgICB0aGlzLnNjcm9sbE9mZnNldCA9IHRoaXMuY2FsY3VsYXRlTmV3T2Zmc2V0KGxvY2F0aW9uLCB7CiAgICAgICAgLy8gRm9yY2UgcmVmbG93CiAgICAgICAgY29udGVudDogdGhpcy4kcmVmcy5jb250ZW50ID8gdGhpcy4kcmVmcy5jb250ZW50LmNsaWVudFdpZHRoIDogMCwKICAgICAgICB3cmFwcGVyOiB0aGlzLiRyZWZzLndyYXBwZXIgPyB0aGlzLiRyZWZzLndyYXBwZXIuY2xpZW50V2lkdGggOiAwCiAgICAgIH0sIHRoaXMuJHZ1ZXRpZnkucnRsLCB0aGlzLnNjcm9sbE9mZnNldCk7CiAgICB9LAoKICAgIHNldFdpZHRocwogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICgpIHsKICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgY29udGVudCwKICAgICAgICAgIHdyYXBwZXIKICAgICAgICB9ID0gdGhpcy4kcmVmczsKICAgICAgICB0aGlzLndpZHRocyA9IHsKICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQgPyBjb250ZW50LmNsaWVudFdpZHRoIDogMCwKICAgICAgICAgIHdyYXBwZXI6IHdyYXBwZXIgPyB3cmFwcGVyLmNsaWVudFdpZHRoIDogMAogICAgICAgIH07CiAgICAgICAgdGhpcy5pc092ZXJmbG93aW5nID0gdGhpcy53aWR0aHMud3JhcHBlciA8IHRoaXMud2lkdGhzLmNvbnRlbnQ7CiAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldygpOwogICAgICB9KTsKICAgIH0KCiAgfSwKCiAgcmVuZGVyKGgpIHsKICAgIHJldHVybiBoKCdkaXYnLCB0aGlzLmdlbkRhdGEoKSwgW3RoaXMuZ2VuUHJldigpLCB0aGlzLmdlbldyYXBwZXIoKSwgdGhpcy5nZW5OZXh0KCldKTsKICB9Cgp9KTsKZXhwb3J0IGRlZmF1bHQgQmFzZVNsaWRlR3JvdXAuZXh0ZW5kKHsKICBuYW1lOiAndi1zbGlkZS1ncm91cCcsCgogIHByb3ZpZGUoKSB7CiAgICByZXR1cm4gewogICAgICBzbGlkZUdyb3VwOiB0aGlzCiAgICB9OwogIH0KCn0pOw=="},null]}