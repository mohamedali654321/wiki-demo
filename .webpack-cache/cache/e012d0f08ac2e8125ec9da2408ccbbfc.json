{"remainingRequest":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js??ref--0-1!E:\\Downloads\\wiki-dev\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Downloads\\wiki-dev\\client\\components\\admin\\admin-utilities-importv1.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Downloads\\wiki-dev\\client\\components\\admin\\admin-utilities-importv1.vue","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\.babelrc","mtime":1618944746000},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618998867176},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\babel-loader\\lib\\index.js","mtime":1617693652020},{"path":"E:\\Downloads\\wiki-dev\\node_modules\\vue-loader\\lib\\index.js","mtime":1618998883415}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9maW5kIGZyb20gImxvZGFzaC9maW5kIjsKaW1wb3J0IF9waWNrIGZyb20gImxvZGFzaC9waWNrIjsKaW1wb3J0IF9zb3J0QnkgZnJvbSAibG9kYXNoL3NvcnRCeSI7CmltcG9ydCBfaGFzIGZyb20gImxvZGFzaC9oYXMiOwppbXBvcnQgX2dldCBmcm9tICJsb2Rhc2gvZ2V0IjsKaW1wb3J0IF9kZWxheSBmcm9tICJsb2Rhc2gvZGVsYXkiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmltcG9ydCB7IFNlbWlwb2xhclNwaW5uZXIgfSBmcm9tICdlcGljLXNwaW5uZXJzJzsKaW1wb3J0IHV0aWxpdHlJbXBvcnR2MVVzZXJzTXV0YXRpb24gZnJvbSAnZ3FsL2FkbWluL3V0aWxpdGllcy91dGlsaXRpZXMtbXV0YXRpb24taW1wb3J0djEtdXNlcnMuZ3FsJzsKaW1wb3J0IHN0b3JhZ2VUYXJnZXRzUXVlcnkgZnJvbSAnZ3FsL2FkbWluL3N0b3JhZ2Uvc3RvcmFnZS1xdWVyeS10YXJnZXRzLmdxbCc7CmltcG9ydCBzdG9yYWdlU3RhdHVzUXVlcnkgZnJvbSAnZ3FsL2FkbWluL3N0b3JhZ2Uvc3RvcmFnZS1xdWVyeS1zdGF0dXMuZ3FsJzsKaW1wb3J0IHRhcmdldEV4ZWN1dGVBY3Rpb25NdXRhdGlvbiBmcm9tICdncWwvYWRtaW4vc3RvcmFnZS9zdG9yYWdlLW11dGF0aW9uLWV4ZWN1dGVhY3Rpb24uZ3FsJzsKaW1wb3J0IHRhcmdldHNTYXZlTXV0YXRpb24gZnJvbSAnZ3FsL2FkbWluL3N0b3JhZ2Uvc3RvcmFnZS1tdXRhdGlvbi1zYXZlLXRhcmdldHMuZ3FsJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIFNlbWlwb2xhclNwaW5uZXIKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaW1wb3J0RmlsdGVyczogWydjb250ZW50JywgJ3VzZXJzJ10sCiAgICAgIGdyb3VwTW9kZTogJ01VTFRJJywKICAgICAgY29udGVudE1vZGU6ICdnaXQnLAogICAgICBkYkNvbm5TdHI6ICdtb25nb2RiOi8vJywKICAgICAgY29udGVudFBhdGg6ICcvd2lraS12MS9yZXBvJywKICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgaXNTdWNjZXNzOiBmYWxzZSwKICAgICAgZ2l0QXV0aE1vZGU6ICdzc2gnLAogICAgICBnaXRBdXRoTW9kZXM6IFt7CiAgICAgICAgdGV4dDogJ1NTSCcsCiAgICAgICAgdmFsdWU6ICdzc2gnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnQmFzaWMnLAogICAgICAgIHZhbHVlOiAnYmFzaWMnCiAgICAgIH1dLAogICAgICBnaXRWZXJpZnlTU0w6IHRydWUsCiAgICAgIGdpdFJlcG9Vcmw6ICcnLAogICAgICBnaXRSZXBvQnJhbmNoOiAnbWFzdGVyJywKICAgICAgZ2l0UHJpdktleTogJycsCiAgICAgIGdpdFVzZXJuYW1lOiAnJywKICAgICAgZ2l0UGFzc3dvcmQ6ICcnLAogICAgICBnaXRVc2VyRW1haWw6ICcnLAogICAgICBnaXRVc2VyTmFtZTogJycsCiAgICAgIGdpdFJlcG9QYXRoOiAnLi9kYXRhL3JlcG8nLAogICAgICBwcm9ncmVzczogMCwKICAgICAgc3VjY2Vzc0dyb3VwczogMCwKICAgICAgc3VjY2Vzc1VzZXJzOiAwLAogICAgICBzdWNjZXNzUGFnZXM6IDAsCiAgICAgIHNob3dGYWlsZWRVc2VyczogZmFsc2UsCiAgICAgIGZhaWxlZFVzZXJzOiBbXQogICAgfTsKICB9LAoKICBjb21wdXRlZDogewogICAgd2FudENvbnRlbnQoKSB7CiAgICAgIHJldHVybiB0aGlzLmltcG9ydEZpbHRlcnMuaW5kZXhPZignY29udGVudCcpID49IDA7CiAgICB9LAoKICAgIHdhbnRVc2VycygpIHsKICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0RmlsdGVycy5pbmRleE9mKCd1c2VycycpID49IDA7CiAgICB9LAoKICAgIG5lZWREaXNrKCkgewogICAgICByZXR1cm4gdGhpcy5jb250ZW50TW9kZSA9PT0gImRpc2siOwogICAgfSwKCiAgICBuZWVkR2l0KCkgewogICAgICByZXR1cm4gdGhpcy5jb250ZW50TW9kZSA9PT0gImdpdCI7CiAgICB9CgogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgc3RhcnRJbXBvcnQoKSB7CiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7CiAgICAgIHRoaXMuZmFpbGVkVXNlcnMgPSBbXTsKCiAgICAgIF9kZWxheShhc3luYyAoKSA9PiB7CiAgICAgICAgLy8gLT4gSW1wb3J0IFVzZXJzCiAgICAgICAgaWYgKHRoaXMud2FudFVzZXJzKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy4kYXBvbGxvLm11dGF0ZSh7CiAgICAgICAgICAgICAgbXV0YXRpb246IHV0aWxpdHlJbXBvcnR2MVVzZXJzTXV0YXRpb24sCiAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICBtb25nb0RiQ29ublN0cmluZzogdGhpcy5kYkNvbm5TdHIsCiAgICAgICAgICAgICAgICBncm91cE1vZGU6IHRoaXMuZ3JvdXBNb2RlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNvbnN0IHJlc3BPYmogPSBfZ2V0KHJlc3AsICdkYXRhLnN5c3RlbS5pbXBvcnRVc2Vyc0Zyb21WMScsIHt9KTsKCiAgICAgICAgICAgIGlmICghX2dldChyZXNwT2JqLCAncmVzcG9uc2VSZXN1bHQuc3VjY2VlZGVkJywgZmFsc2UpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9nZXQocmVzcE9iaiwgJ3Jlc3BvbnNlUmVzdWx0Lm1lc3NhZ2UnLCAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCcpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5zdWNjZXNzVXNlcnMgPSBfZ2V0KHJlc3BPYmosICd1c2Vyc0NvdW50JywgMCk7CiAgICAgICAgICAgIHRoaXMuc3VjY2Vzc0dyb3VwcyA9IF9nZXQocmVzcE9iaiwgJ2dyb3Vwc0NvdW50JywgMCk7CiAgICAgICAgICAgIHRoaXMuZmFpbGVkVXNlcnMgPSBfZ2V0KHJlc3BPYmosICdmYWlsZWQnLCBbXSk7CiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgKz0gNTA7CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdwdXNoR3JhcGhFcnJvcicsIGVycik7CiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICB9IC8vIC0+IEltcG9ydCBDb250ZW50CgoKICAgICAgICBpZiAodGhpcy53YW50Q29udGVudCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuJGFwb2xsby5xdWVyeSh7CiAgICAgICAgICAgICAgcXVlcnk6IHN0b3JhZ2VUYXJnZXRzUXVlcnksCiAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKF9oYXMocmVzcCwgJ2RhdGEuc3RvcmFnZS50YXJnZXRzJykpIHsKICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzICs9IDEwOwogICAgICAgICAgICAgIGxldCB0YXJnZXRzID0gcmVzcC5kYXRhLnN0b3JhZ2UudGFyZ2V0cy5tYXAoc3RyID0+IHsKICAgICAgICAgICAgICAgIGxldCBuU3RyID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdHIpLCB7fSwgewogICAgICAgICAgICAgICAgICBjb25maWc6IF9zb3J0Qnkoc3RyLmNvbmZpZy5tYXAoY2ZnID0+IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2ZnKSwge30sIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogSlNPTi5wYXJzZShjZmcudmFsdWUpCiAgICAgICAgICAgICAgICAgIH0pKSwgW3QgPT4gdC52YWx1ZS5vcmRlcl0pCiAgICAgICAgICAgICAgICB9KTsgLy8gLT4gU2V0dXAgR2l0IE1vZHVsZQoKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZW50TW9kZSA9PT0gJ2dpdCcgJiYgblN0ci5rZXkgPT09ICdnaXQnKSB7CiAgICAgICAgICAgICAgICAgIG5TdHIuaXNFbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgblN0ci5tb2RlID0gJ3N5bmMnOwogICAgICAgICAgICAgICAgICBuU3RyLnN5bmNJbnRlcnZhbCA9ICdQVDVNJzsKICAgICAgICAgICAgICAgICAgblN0ci5jb25maWcgPSBbewogICAgICAgICAgICAgICAgICAgIGtleTogJ2F1dGhUeXBlJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2l0QXV0aE1vZGUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdyZXBvVXJsJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2l0UmVwb1VybAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGtleTogJ2JyYW5jaCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdpdFJlcG9CcmFuY2gKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdzc2hQcml2YXRlS2V5TW9kZScsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnY29udGVudHMnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAnc3NoUHJpdmF0ZUtleVBhdGgnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdzc2hQcml2YXRlS2V5Q29udGVudCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdpdFByaXZLZXkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICd2ZXJpZnlTU0wnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5naXRWZXJpZnlTU0wKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdiYXNpY1VzZXJuYW1lJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2l0VXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdiYXNpY1Bhc3N3b3JkJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2l0UGFzc3dvcmQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdkZWZhdWx0RW1haWwnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5naXRVc2VyRW1haWwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICdkZWZhdWx0TmFtZScsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdpdFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAnbG9jYWxSZXBvUGF0aCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdpdFJlcG9QYXRoCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAnZ2l0QmluYXJ5UGF0aCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICB9IC8vIC0+IFNldHVwIERpc2sgTW9kdWxlCgoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRNb2RlID09PSAnZGlzaycgJiYgblN0ci5rZXkgPT09ICdkaXNrJykgewogICAgICAgICAgICAgICAgICBuU3RyLmlzRW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgIG5TdHIubW9kZSA9ICdwdXNoJzsKICAgICAgICAgICAgICAgICAgblN0ci5zeW5jSW50ZXJ2YWwgPSAnUDBEJzsKICAgICAgICAgICAgICAgICAgblN0ci5jb25maWcgPSBbewogICAgICAgICAgICAgICAgICAgIGtleTogJ3BhdGgnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jb250ZW50UGF0aAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGtleTogJ2NyZWF0ZURhaWx5QmFja3VwcycsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIG5TdHI7CiAgICAgICAgICAgICAgfSk7IC8vIC0+IFNhdmUgc3RvcmFnZSBtb2R1bGVzIGNvbmZpZ3VyYXRpb24KCiAgICAgICAgICAgICAgY29uc3QgcmVzcFN2ID0gYXdhaXQgdGhpcy4kYXBvbGxvLm11dGF0ZSh7CiAgICAgICAgICAgICAgICBtdXRhdGlvbjogdGFyZ2V0c1NhdmVNdXRhdGlvbiwKICAgICAgICAgICAgICAgIHZhcmlhYmxlczogewogICAgICAgICAgICAgICAgICB0YXJnZXRzOiB0YXJnZXRzLm1hcCh0Z3QgPT4gX3BpY2sodGd0LCBbJ2lzRW5hYmxlZCcsICdrZXknLCAnY29uZmlnJywgJ21vZGUnLCAnc3luY0ludGVydmFsJ10pKS5tYXAoc3RyID0+IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RyKSwge30sIHsKICAgICAgICAgICAgICAgICAgICBjb25maWc6IHN0ci5jb25maWcubWFwKGNmZyA9PiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNmZyksIHt9LCB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICB2OiBjZmcudmFsdWUudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjb25zdCByZXNwT2JqID0gX2dldChyZXNwU3YsICdkYXRhLnN0b3JhZ2UudXBkYXRlVGFyZ2V0cycsIHt9KTsKCiAgICAgICAgICAgICAgaWYgKCFfZ2V0KHJlc3BPYmosICdyZXNwb25zZVJlc3VsdC5zdWNjZWVkZWQnLCBmYWxzZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfZ2V0KHJlc3BPYmosICdyZXNwb25zZVJlc3VsdC5tZXNzYWdlJywgJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnKSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzICs9IDEwOyAvLyAtPiBXYWl0IGZvciBzdWNjZXNzIHN5bmMKCiAgICAgICAgICAgICAgbGV0IHN0YXR1c0F0dGVtcHRzID0gMDsKCiAgICAgICAgICAgICAgd2hpbGUgKHN0YXR1c0F0dGVtcHRzIDwgMTApIHsKICAgICAgICAgICAgICAgIHN0YXR1c0F0dGVtcHRzKys7CiAgICAgICAgICAgICAgICBjb25zdCByZXNwU3RhdHVzID0gYXdhaXQgdGhpcy4kYXBvbGxvLnF1ZXJ5KHsKICAgICAgICAgICAgICAgICAgcXVlcnk6IHN0b3JhZ2VTdGF0dXNRdWVyeSwKICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoX2hhcyhyZXNwU3RhdHVzLCAnZGF0YS5zdG9yYWdlLnN0YXR1c1swXScpKSB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gX2ZpbmQocmVzcFN0YXR1cy5kYXRhLnN0b3JhZ2Uuc3RhdHVzLCBbJ2tleScsIHRoaXMuY29udGVudE1vZGVdKTsKCiAgICAgICAgICAgICAgICAgIGlmICghc3QpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0b3JhZ2UgdGFyZ2V0IGNvdWxkIG5vdCBiZSBjb25maWd1cmVkLicpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0LnN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BlbmRpbmcnOgogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1c0F0dGVtcHRzID49IDEwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RvcmFnZSB0YXJnZXQgaXMgc3R1Y2sgaW4gcGVuZGluZyBzdGF0ZS4gVHJ5IGFnYWluLicpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wZXJhdGlvbmFsJzoKICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0F0dGVtcHRzID0gMTA7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXJyb3InOgogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0Lm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBzdG9yYWdlIHN5bmMgc3RhdHVzLicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyArPSAxNTsgLy8gLT4gUGVyZm9ybSBpbXBvcnQgYWxsCgogICAgICAgICAgICAgIGNvbnN0IHJlc3BJbXBvcnQgPSBhd2FpdCB0aGlzLiRhcG9sbG8ubXV0YXRlKHsKICAgICAgICAgICAgICAgIG11dGF0aW9uOiB0YXJnZXRFeGVjdXRlQWN0aW9uTXV0YXRpb24sCiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgdGFyZ2V0S2V5OiB0aGlzLmNvbnRlbnRNb2RlLAogICAgICAgICAgICAgICAgICBoYW5kbGVyOiAnaW1wb3J0QWxsJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjb25zdCByZXNwSW1wb3J0T2JqID0gX2dldChyZXNwSW1wb3J0LCAnZGF0YS5zdG9yYWdlLmV4ZWN1dGVBY3Rpb24nLCB7fSk7CgogICAgICAgICAgICAgIGlmICghX2dldChyZXNwSW1wb3J0T2JqLCAncmVzcG9uc2VSZXN1bHQuc3VjY2VlZGVkJywgZmFsc2UpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2dldChyZXNwSW1wb3J0T2JqLCAncmVzcG9uc2VSZXN1bHQubWVzc2FnZScsICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkJykpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyArPSAxNTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBzdG9yYWdlIHRhcmdldHMuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3B1c2hHcmFwaEVycm9yJywgZXJyKTsKICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IHRydWU7CiAgICAgIH0sIDE1MDApOwogICAgfQoKICB9Cn07"},null]}